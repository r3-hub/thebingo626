const phraseSets = [
  {
    name: "–†–æ–º–±–∞ mode",
    phrases: [
      "—Ä–æ–º–±–∞ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ –µ–±–ª—é",
      "—Ä–æ–º–±–∞ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ –ø–æ—Ä–Ω—É—à–Ω—ã–µ –∏–≥—Ä—ã",
      "–±–µ–±–µ–π",
      "—Ñ–æ—Ç–æ–∂–∞–±—ã",
      "—Ä–æ–º–±–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç –∏–º—è",
      "—Ä–æ–º–±–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–æ",
      "—Ç–∞–∫–æ–π –Ω–æ—Ç–∞",
      "—Ä–æ–º–±–∞ –ø—å–µ—Ç –∏–∑ –∫—Ä—É–∂–∫–∏",
      "—Ä–æ–º–±–∞ —Ö—Ä—é—á–∏—Ç –Ω–∞ –ø–∞—É–∑–µ",
      "–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ",
      "—Ä–æ–º–±–∞ –∫–æ—Ä—á–∏—Ç –∫—Ä—É—Ç–æ–µ –µ–±–∞–ª–æ",
      "—Ä–æ–º–±–∞-–∞–∫—Ç–µ—Ä",
      "—Ä–æ–º–±–∞-–ø–∞—Ä–æ–¥–∏—Å—Ç",
      "—Ä–æ–º–±–∞-–ø–µ–≤–µ—Ü",
      "—Ä–æ–º–±–∞-–æ–±–∑–æ—Ä—â–∏–∫",
      "–î–£–ú",
      "–º–∏–∫ –≥–æ—Ä–¥–æ–Ω",
      "–º–∞–π –∫—Ä–∞–π",
      "–≥–æ–¥–æ–≤–∞—Ä",
      "—Ä–æ–º–±–∞ –º–æ—à–Ω–∏—Ç",
      "—á—É–≤–∞–∫ –∑–∞–¥—Ä–æ—Ç –ø–æ–ª–Ω–µ–π—à–∏–π",
      "–ú–û–©–¨",
      "–∫—Ä–∏–Ω–∂–æ–≤–∞—è —Ä–æ–º–±–∞-—à—É—Ç–∫–∞",
      "–≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞",
      "–≤—ã—Å–æ–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", //25
      "—Ä–æ–º–±–∞ —Å—Ç—Ä–∏–º–∏—Ç –≤ —Ç—Ä—É—Å–∞—Ö",
      "–∫–∞–≥—Ç–∞–≤—ã–π —Ä–µ–π–¥",
      "—Å–≤–µ–∂–∏–µ —Å–∏–ª—ã"
    ]
  },
  {
    name: "–ö—É–ª—É–∫ mode",
    phrases: [
      "–Ω–µ—á–µ—Å—Ç–Ω–æ",
      "—Å—É–ø–µ—Ä–Ω–µ—á–µ—Å—Ç–Ω–æ",
      "–Ω–µ—Ç —Ç—É—Ä–±–æ",
      "–Ω—É –∫—Ç–æ —Ç–∞–∫ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä—ã?",
      "–ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã –∫–Ω–æ–ø–∫–∏",
      "–∏–≥—Ä–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏",
      "–ø–æ—á–µ–º—É –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç?",
      "–∫–æ–º—É –≤–∞–∂–µ–Ω —Å—é–∂–µ—Ç?",
      "–∫–æ–º—É –≤–∞–∂–Ω–∞ –º—É–∑—ã–∫–∞?",
      "–∫–æ–º—É –≤–∞–∂–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞?",
      "–æ—Ç–∫—É–¥–∞ —è –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å?",
      "—É–≥—Ä–æ–∂–∞–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ",
      "—Å–º–æ—Ç—Ä–∏—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ",
      "–º–µ–¥–∞–ª—å–∫–∞",
      "–Ø–ñ–ï –ñ–ê–õ",
      "–Ω–µ–ª–æ–≥–∏—á–Ω–æ",
      "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞",
      "–∏–≥—Ä–∞ –≥–æ–≤–Ω–∞",
      "–Ω–µ—Ç –ø–∞—É–∑—ã",
      "–ù–£ –ü–û–ß–ï–ú–£?!",
      "—Å–µ–π–≤—ã —ç—Ç–æ —á–∏—Ç",
      "–∫—Ç–æ –≤ —ç—Ç–æ –≤–æ–æ–±—â–µ –∏–≥—Ä–∞–µ—Ç?",
      "–ö–ê–†–ö!",
      "–∂–∞–ª—É–µ—Ç—Å—è —á—Ç–æ –º–∞–ª–æ –¥–æ–Ω–∞—Ç–æ–≤",
      "–≥–æ—Å–ø–æ–¥–∏ –∑–∞ —á—Ç–æ", //25
      "–∫–∞–≥—Ç–∞–≤—ã–π —Ä–µ–π–¥",
      "–∑–∞–∑–≤–æ–Ω–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω"
    ]
  }
]
const STORAGE_KEY = "phrasesGrid";
const strikeSound = new Audio("strike.mp3");
const lineCompleteSound = new Audio("line–°omplete.mp3");
const toggleSoundButton = document.getElementById("toggle-sound");
const togglePhraseSetButton = document.getElementById("toggle-phraseset");
let phraseSetName = document.getElementById("phrase-set-name");
let soundEnabled = JSON.parse(localStorage.getItem("soundEnabled")) ?? true;
let currentPhraseSetIndex = parseInt(localStorage.getItem("phraseSetIndex")) || 0;

function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

function saveState(cells) {
  const data = Array.from(cells).map(cell => ({
    text: cell.textContent,
    struck: cell.classList.contains("struck")
  }));
  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
}

function loadState() {
  const data = localStorage.getItem(STORAGE_KEY);
  return data ? JSON.parse(data) : null;
}

function generateGrid(fromSaved = false) {
  const grid = document.getElementById("grid");
  const phrases = phraseSets[currentPhraseSetIndex].phrases;
  let cellData;

  grid.innerHTML = "";

  if (fromSaved) {
    cellData = loadState();
  } else {
    const shuffled = shuffle([...phrases]).slice(0, 25);
    cellData = shuffled.map(p => ({ text: p, struck: false }));
    localStorage.setItem(STORAGE_KEY, JSON.stringify(cellData));
  }

  cellData.forEach((item, index) => {
    const cell = document.createElement("div");
    cell.className = "cell";
    cell.textContent = item.text;
    if (item.struck) cell.classList.add("struck");

    cell.addEventListener("click", () => {
      const wasStruck = cell.classList.contains("struck");
      cell.classList.toggle("struck");

      saveState(document.querySelectorAll(".cell"));
      const newLine = checkLines();

      if (!wasStruck && !newLine && soundEnabled) {
        playStrikeSound();
      }
    });

    grid.appendChild(cell);
  });
}

document.getElementById("regenerateBtn").addEventListener("click", () => {
  localStorage.removeItem(STORAGE_KEY);
  generateGrid(false);
});

generateGrid(true);

function checkLines() {
  const cells = document.querySelectorAll(".cell");
  const grid = [];
  const previouslyComplete = new Set();
  let newLineCompleted = false;

  cells.forEach((cell, i) => {
    if (cell.classList.contains("complete-line")) {
      previouslyComplete.add(i);
    }
  });

  for (let cell of cells) {
    cell.classList.remove("complete-line");
  }

  for (let i = 0; i < 5; i++) {
    grid[i] = [];
    for (let j = 0; j < 5; j++) {
      grid[i][j] = cells[i * 5 + j];
    }
  }

  for (let i = 0; i < 5; i++) {
    const row = grid[i];

    if (row.every(cell => cell.classList.contains("struck"))) {
      row.forEach((cell, j) => {
        const index = i * 5 + j;

        cell.classList.add("complete-line");
        if (!previouslyComplete.has(index)) {
          newLineCompleted = true;
        }
      });
    }
  }

  for (let j = 0; j < 5; j++) {
    const column = grid.map(row => row[j]);

    if (column.every(cell => cell.classList.contains("struck"))) {
      column.forEach((cell, i) => {
        const index = i * 5 + j;

        cell.classList.add("complete-line");
        if (!previouslyComplete.has(index)) {
          newLineCompleted = true;
        }
      });
    }
  }

  if (newLineCompleted) {
    playLineCompleteSound();
  }

  return newLineCompleted;
}

function playStrikeSound() {
  strikeSound.currentTime = 0;
  strikeSound.play();
}

function playLineCompleteSound() {
  lineCompleteSound.currentTime = 0;
  lineCompleteSound.play();
}

function playStrikeSound() {
  if (soundEnabled) {
    strikeSound.currentTime = 0;
    strikeSound.play();
  }
}

function playLineCompleteSound() {
  if (soundEnabled) {
    lineCompleteSound.currentTime = 0;
    lineCompleteSound.play();
  }
}

function updateSoundButton() {
  toggleSoundButton.textContent = soundEnabled ? "üîä" : "üîá";
}

toggleSoundButton.addEventListener("click", () => {
  soundEnabled = !soundEnabled;
  localStorage.setItem("soundEnabled", JSON.stringify(soundEnabled));
  updateSoundButton();
});

updateSoundButton();

function updatePhraseSetButton() {
  phraseSetName.textContent = phraseSets[currentPhraseSetIndex].name;
}

togglePhraseSetButton.addEventListener("click", () => {
  currentPhraseSetIndex = (currentPhraseSetIndex + 1) % phraseSets.length;
  localStorage.setItem("phraseSetIndex", currentPhraseSetIndex);
  localStorage.removeItem(STORAGE_KEY); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Ç–∫—É
  generateGrid(false); // –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —Å –Ω–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º
  updatePhraseSetButton();
});

updatePhraseSetButton();
